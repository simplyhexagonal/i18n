{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import fs from 'fs';\nimport i18next, {\n  i18n,\n  InitOptions,\n  TFunction\n} from 'i18next';\nimport {\n  MultiReplaceMatcher,\n  MultiReplaceSyncPatterns,\n  multiReplaceSync,\n} from '@simplyhexagonal/multi-replace';\n\nexport default class I18N {\n  private static instance: I18N;\n\n  private static stringifyAndAlert = (value: any) => {\n    console.log(`\n    \uD83D\uDFE1 Missing translation for: ${value}\n    `);\n    return JSON.stringify(value);\n  };\n\n  private _generateReplacer = (t: TFunction) => {\n    return (match: string, p0: string) => {\n      return t(p0);\n    }\n  };\n\n  // @ts-ignore\n  initPromise: Promise<TFunction>;\n\n  t: TFunction | null = null;\n\n  matchers: MultiReplaceMatcher[] = [/__\\(\\s*['\"`](.+?)['\"`]\\s*\\)/g];\n\n  replacer: (\n    match: string,\n    p0: string,\n  ) => string = (\n    match: string,\n    p0: string,\n  ) => {\n    console.log(`\n    \uD83D\uDFE1 I18N WARNING: replacer called but is not ready! Did you forget to await initPromise?\n    `);\n\n    return p0;\n  };\n\n  i18next: i18n = i18next;\n\n  changeLanguage: i18n['changeLanguage'] = i18next.changeLanguage.bind(i18next);\n\n  plugin = {\n    name: 'i18n',\n    setup(build: any) {\n      const loadPatterns: [RegExp, 'js' | 'jsx' | 'ts' | 'tsx'][] = [\n        [/\\.tsx$/, 'tsx'],\n        [/\\.ts$/, 'ts'],\n        [/\\.jsx$/, 'jsx'],\n        [/\\.js$/, 'js'],\n      ];\n      loadPatterns.forEach(([filter, loader]) => {\n        build.onLoad({ filter }, async (args: any) => {\n          await I18N.instance.initPromise;\n\n          const originalContents = fs.readFileSync(args.path, 'utf8');\n          const contents = I18N.instance.apply(originalContents);\n\n          return {\n            contents,\n            loader,\n          }\n        });\n      });\n    }\n  };\n\n  constructor(options: InitOptions, matchers?: MultiReplaceMatcher[]) {\n    if (I18N.instance) {\n      console.log(`\n      \uD83D\uDFE1 I18N WARNING: already initialized! Returning existing instance...\n      `);\n\n      return I18N.instance;\n    }\n\n    this.initPromise = i18next.use({\n      type: 'postProcessor',\n      name: 'warnMissingTranslation',\n      process: (value: any, key: any, options: any, translator: any) => {\n        if (value === key) {\n          I18N.stringifyAndAlert(value);\n        }\n\n        return value;\n      }\n    }).init(options).then((t) => {\n      this.t = t;\n\n      this.replacer = this._generateReplacer(t);\n\n      return t;\n    });\n\n    if (matchers) {\n      this.matchers = matchers;\n    }\n\n    I18N.instance = this;\n  }\n\n  apply = (originalContents: string) => {\n    const replacePatterns: MultiReplaceSyncPatterns = this.matchers.map(\n      (m) => [m, this.replacer]\n    );\n\n    return multiReplaceSync(originalContents, replacePatterns);\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAe;AACf,uBAIO;AACP,6BAIO;AAEP,sBAA0B;AAAA,IAkExB,YAAY,SAAsB,UAAkC;AAxD5D,+BAAoB,CAAC,MAAiB;AAC5C,eAAO,CAAC,OAAe,OAAe;AACpC,iBAAO,EAAE;AAAA;AAAA;AAOb,eAAsB;AAEtB,sBAAkC,CAAC;AAEnC,sBAGc,CACZ,OACA,OACG;AACH,gBAAQ,IAAI;AAAA;AAAA;AAIZ,eAAO;AAAA;AAGT,qBAAgB;AAEhB,4BAAyC,uBAAQ,eAAe,KAAK;AAErE,oBAAS;AAAA,QACP,MAAM;AAAA,QACN,MAAM,OAAY;AAChB,gBAAM,eAAwD;AAAA,YAC5D,CAAC,UAAU;AAAA,YACX,CAAC,SAAS;AAAA,YACV,CAAC,UAAU;AAAA,YACX,CAAC,SAAS;AAAA;AAEZ,uBAAa,QAAQ,CAAC,CAAC,QAAQ,YAAY;AACzC,kBAAM,OAAO,EAAE,UAAU,OAAO,SAAc;AAC5C,oBAAM,MAAK,SAAS;AAEpB,oBAAM,mBAAmB,kBAAG,aAAa,KAAK,MAAM;AACpD,oBAAM,WAAW,MAAK,SAAS,MAAM;AAErC,qBAAO;AAAA,gBACL;AAAA,gBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCV,mBAAQ,CAAC,qBAA6B;AACpC,cAAM,kBAA4C,KAAK,SAAS,IAC9D,CAAC,MAAM,CAAC,GAAG,KAAK;AAGlB,eAAO,2CAAiB,kBAAkB;AAAA;AAtC1C,UAAI,MAAK,UAAU;AACjB,gBAAQ,IAAI;AAAA;AAAA;AAIZ,eAAO,MAAK;AAAA;AAGd,WAAK,cAAc,uBAAQ,IAAI;AAAA,QAC7B,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,CAAC,OAAY,KAAU,UAAc,eAAoB;AAChE,cAAI,UAAU,KAAK;AACjB,kBAAK,kBAAkB;AAAA;AAGzB,iBAAO;AAAA;AAAA,SAER,KAAK,SAAS,KAAK,CAAC,MAAM;AAC3B,aAAK,IAAI;AAET,aAAK,WAAW,KAAK,kBAAkB;AAEvC,eAAO;AAAA;AAGT,UAAI,UAAU;AACZ,aAAK,WAAW;AAAA;AAGlB,YAAK,WAAW;AAAA;AAAA;AAjGpB;AAGiB,EAHjB,KAGiB,oBAAoB,CAAC,UAAe;AACjD,YAAQ,IAAI;AAAA,yCACkB;AAAA;AAE9B,WAAO,KAAK,UAAU;AAAA;",
  "names": []
}
