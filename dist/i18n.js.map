{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import fs from 'fs';\nimport i18next, {\n  i18n,\n  InitOptions,\n  TFunction\n} from 'i18next';\nimport {\n  MultiReplaceMatcher,\n  MultiReplaceSyncPatterns,\n  multiReplaceSync,\n} from '@simplyhexagonal/multi-replace';\nimport MonoContext from '@simplyhexagonal/mono-context';\n\n// @ts-ignore\nimport { version } from '../package.json';\n\nexport default class I18N {\n  static version = version;\n\n  private static instance: I18N;\n  private _logfn: (\n    (...args: any[]) => void\n  ) | (\n    (...args: any[]) => Promise<void>\n  ) = (...args) => console.log('\\n\\t\uD83D\uDFE1 ', ...args, '\\n');\n\n  private static stringifyAndAlert = (value: any) => {\n    const {language} = I18N.instance.i18next;\n\n    I18N.instance._logfn(`I18N WARNING: Missing \"${language}\" translation for: ${value}`);\n\n    return JSON.stringify(value);\n  };\n\n  private _generateReplacer = (t: TFunction) => {\n    return (match: string, p0: string) => {\n      return t(p0);\n    }\n  };\n\n  // @ts-ignore\n  initPromise: Promise<TFunction>;\n\n  t: TFunction | null = null;\n\n  matchers: MultiReplaceMatcher[] = [/__\\(\\s*['\"`](.+?)['\"`]\\s*\\)/g];\n\n  replacer: (\n    match: string,\n    p0: string,\n  ) => string = (\n    match: string,\n    p0: string,\n  ) => {\n    I18N.instance._logfn(\n      'I18N WARNING: replacer called but is not ready! Did you forget to await initPromise?'\n    );\n\n    return p0;\n  };\n\n  i18next: i18n = i18next;\n\n  changeLanguage: i18n['changeLanguage'] = i18next.changeLanguage.bind(i18next);\n\n  plugins = {\n    esbuild: {\n      name: 'i18n',\n      setup(build: any) {\n        const loadPatterns: [RegExp, 'js' | 'jsx' | 'ts' | 'tsx'][] = [\n          [/\\.tsx$/, 'tsx'],\n          [/\\.ts$/, 'ts'],\n          [/\\.jsx$/, 'jsx'],\n          [/\\.js$/, 'js'],\n        ];\n        loadPatterns.forEach(([filter, loader]) => {\n          build.onLoad({ filter }, async (args: any) => {\n            await I18N.instance.initPromise;\n\n            const originalContents = fs.readFileSync(args.path, 'utf8');\n            const contents = I18N.instance.apply(originalContents);\n\n            return {\n              contents,\n              loader,\n            }\n          });\n        });\n      },\n    },\n    vite: {\n      name: 'i18n',\n      transform: async (code: string) => {\n        await I18N.instance.initPromise;\n\n        return {\n          code: I18N.instance.apply(code),\n          map: null,\n        };\n      },\n      transformIndexHtml: async (html: string) => {\n        await I18N.instance.initPromise;\n        return I18N.instance.apply(html);\n      },\n    }\n  };\n\n  constructor(options: InitOptions, matchers?: MultiReplaceMatcher[]) {\n    const callCount = MonoContext.count('I18N');\n    if (callCount > 1) {\n      I18N.instance._logfn('I18N WARNING: already initialized! Returning existing instance...');\n\n      return I18N.instance;\n    }\n\n    this.initPromise = i18next.use({\n      type: 'postProcessor',\n      name: 'warnMissingTranslation',\n      process: (value: any, key: any, options: any, translator: any) => {\n        if ([value].flat().join('') === [key].flat().join('')) {\n          I18N.stringifyAndAlert(value);\n        }\n\n        return value;\n      }\n    }).init({\n      ...options,\n      postProcess: [\n        'warnMissingTranslation',\n        ...(options.postProcess || []),\n      ],\n    }).then((t) => {\n      this.t = t;\n\n      this.replacer = this._generateReplacer(t);\n\n      return t;\n    });\n\n    if (typeof (MonoContext.getStateValue('logger') || {}).warn === 'function') {\n      this._logfn = MonoContext.getStateValue('logger').warn;\n    }\n\n    if (matchers) {\n      this.matchers = matchers;\n    }\n\n    I18N.instance = this;\n  }\n\n  apply = (originalContents: string) => {\n    const replacePatterns: MultiReplaceSyncPatterns = this.matchers.map(\n      (m) => [m, this.replacer]\n    );\n\n    return multiReplaceSync(originalContents, replacePatterns);\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAe;AACf,uBAIO;AACP,6BAIO;AACP,4BAAwB;AAGxB,uBAAwB;AAExB,sBAA0B;AAAA,IA2FxB,YAAY,SAAsB,UAAkC;AAvF5D,oBAIJ,IAAI,SAAS,QAAQ,IAAI,iBAAW,GAAG,MAAM;AAUzC,+BAAoB,CAAC,MAAiB;AAC5C,eAAO,CAAC,OAAe,OAAe;AACpC,iBAAO,EAAE;AAAA;AAAA;AAOb,eAAsB;AAEtB,sBAAkC,CAAC;AAEnC,sBAGc,CACZ,OACA,OACG;AACH,cAAK,SAAS,OACZ;AAGF,eAAO;AAAA;AAGT,qBAAgB;AAEhB,4BAAyC,uBAAQ,eAAe,KAAK;AAErE,qBAAU;AAAA,QACR,SAAS;AAAA,UACP,MAAM;AAAA,UACN,MAAM,OAAY;AAChB,kBAAM,eAAwD;AAAA,cAC5D,CAAC,UAAU;AAAA,cACX,CAAC,SAAS;AAAA,cACV,CAAC,UAAU;AAAA,cACX,CAAC,SAAS;AAAA;AAEZ,yBAAa,QAAQ,CAAC,CAAC,QAAQ,YAAY;AACzC,oBAAM,OAAO,EAAE,UAAU,OAAO,SAAc;AAC5C,sBAAM,MAAK,SAAS;AAEpB,sBAAM,mBAAmB,kBAAG,aAAa,KAAK,MAAM;AACpD,sBAAM,WAAW,MAAK,SAAS,MAAM;AAErC,uBAAO;AAAA,kBACL;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMV,MAAM;AAAA,UACJ,MAAM;AAAA,UACN,WAAW,OAAO,SAAiB;AACjC,kBAAM,MAAK,SAAS;AAEpB,mBAAO;AAAA,cACL,MAAM,MAAK,SAAS,MAAM;AAAA,cAC1B,KAAK;AAAA;AAAA;AAAA,UAGT,oBAAoB,OAAO,SAAiB;AAC1C,kBAAM,MAAK,SAAS;AACpB,mBAAO,MAAK,SAAS,MAAM;AAAA;AAAA;AAAA;AAgDjC,mBAAQ,CAAC,qBAA6B;AACpC,cAAM,kBAA4C,KAAK,SAAS,IAC9D,CAAC,MAAM,CAAC,GAAG,KAAK;AAGlB,eAAO,2CAAiB,kBAAkB;AAAA;AA/C1C,YAAM,YAAY,4BAAY,MAAM;AACpC,UAAI,YAAY,GAAG;AACjB,cAAK,SAAS,OAAO;AAErB,eAAO,MAAK;AAAA;AAGd,WAAK,cAAc,uBAAQ,IAAI;AAAA,QAC7B,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,CAAC,OAAY,KAAU,UAAc,eAAoB;AAChE,cAAI,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,KAAK,OAAO,KAAK,KAAK;AACrD,kBAAK,kBAAkB;AAAA;AAGzB,iBAAO;AAAA;AAAA,SAER,KAAK;AAAA,WACH;AAAA,QACH,aAAa;AAAA,UACX;AAAA,UACA,GAAI,QAAQ,eAAe;AAAA;AAAA,SAE5B,KAAK,CAAC,MAAM;AACb,aAAK,IAAI;AAET,aAAK,WAAW,KAAK,kBAAkB;AAEvC,eAAO;AAAA;AAGT,UAAI,OAAQ,6BAAY,cAAc,aAAa,IAAI,SAAS,YAAY;AAC1E,aAAK,SAAS,4BAAY,cAAc,UAAU;AAAA;AAGpD,UAAI,UAAU;AACZ,aAAK,WAAW;AAAA;AAGlB,YAAK,WAAW;AAAA;AAAA;AAnIpB;AACS,EADT,KACS,UAAU;AASF,EAVjB,KAUiB,oBAAoB,CAAC,UAAe;AACjD,UAAM,EAAC,aAAY,MAAK,SAAS;AAEjC,UAAK,SAAS,OAAO,0BAA0B,8BAA8B;AAE7E,WAAO,KAAK,UAAU;AAAA;",
  "names": []
}
